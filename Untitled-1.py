# -*- coding: utf-8 -*-
"""4o_CV.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rEStlGiKEOYiTtb-Dwx859VL-lt2DOqg
"""

!pip install PyPDF2 python-docx requests OpenAI

import os
import requests
from docx import Document
import PyPDF2
import json

# 設置 API 密鑰和基本 URL
api_key = os.getenv("OPENAI_API_KEY", "sk-x26ajxMbqpxrDuZIZXNl43KVORF953ikzMSMMqwGQgdnoWFo")
base_url = "https://api.chatanywhere.tech/v1/chat/completions"

def read_txt(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return file.read().strip()
    except Exception as e:
        print(f"Error reading text file: {e}")
        return ""

def read_pdf(file_path):
    try:
        with open(file_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            text = [page.extract_text() for page in reader.pages if page.extract_text() is not None]
            return "\n".join(text).strip()
    except Exception as e:
        print(f"Error reading PDF file: {e}")
        return ""

def read_docx(file_path):
    try:
        doc = Document(file_path)
        return "\n".join([para.text for para in doc.paragraphs if para.text]).strip()
    except Exception as e:
        print(f"Error reading DOCX file: {e}")
        return ""

def extract_resume_info(resume_text):
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }

    data = {
        "model": "gpt-4o-mini",
        "messages": [
            {
                "role": "user",
                "content": f"Only return json format, Please extract the following information from the resume text:\nName, Gender, Phone, Email, Address, Education, Work Experience, Skills\n\n{resume_text}"
            }
        ],
        "max_tokens": 1000
    }

    try:
        response = requests.post(base_url, headers=headers, json=data)
        response.raise_for_status()  # Raise an error for bad responses
        response_data = response.json()

        # 只返回 JSON 格式的數據
        if 'choices' in response_data and len(response_data['choices']) > 0:
            return response_data['choices'][0]['message']['content']
        else:
            return {"error": "Unexpected response structure"}
    except requests.exceptions.RequestException as e:
        return {"error": str(e)}
    except (KeyError, IndexError) as e:
        return {"error": "Unexpected response structure"}

if __name__ == "__main__":
    # Read file path
    file_path = "CV_LohWaiChung1.docx"  # or "test.pdf" or "test.txt"

    if file_path.endswith('.txt'):
        resume_text = read_txt(file_path)
    elif file_path.endswith('.pdf'):
        resume_text = read_pdf(file_path)
    elif file_path.endswith('.docx'):
        resume_text = read_docx(file_path)
    else:
        print("Unsupported file format.")
        exit()

    api_response = extract_resume_info(resume_text)

    # 直接打印 JSON 回應
    print("API Response:")
    print(api_response)

import os
import requests
from docx import Document
import PyPDF2
import re

# 設置 API 密鑰和基本 URL
api_key = os.getenv("OPENAI_API_KEY", "sk-x26ajxMbqpxrDuZIZXNl43KVORF953ikzMSMMqwGQgdnoWFo")
base_url = "https://api.chatanywhere.tech/v1/chat/completions"

def read_txt(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return file.read().strip()
    except Exception as e:
        print(f"Error reading TXT file: {e}")
        return ""

def read_pdf(file_path):
    try:
        with open(file_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            text = [page.extract_text() for page in reader.pages if page.extract_text()]
            return "\n".join(text).strip()
    except Exception as e:
        print(f"Error reading PDF file: {e}")
        return ""

def read_docx(file_path):
    try:
        doc = Document(file_path)
        return "\n".join([para.text for para in doc.paragraphs if para.text]).strip()
    except Exception as e:
        print(f"Error reading DOCX file: {e}")
        return ""

def extract_resume_info(resume_text, job_title):
    if not resume_text:
        return "No resume text available."

    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }

    data = {
        "model": "gpt-4o-mini",
        "messages": [
            {
                "role": "user",
                "content": (
                    f"Please evaluate this resume for the role of a {job_title}. "
                    f"Provide a score out of 100 and format your response as follows:\n"
                    f"Score: [score]/100\n"
                    f"Details: [provide a brief evaluation].\n\n"
                    f"Resume: {resume_text}"
                )
            }
        ],
        "max_tokens": 300
    }

    try:
        response = requests.post(base_url, headers=headers, json=data)
        response.raise_for_status()  # Raise an error for bad responses
        response_data = response.json()
        score_text = response_data['choices'][0]['message']['content']
        print("Raw API Response:", score_text)  # Debug output
        score = extract_score(score_text)
        return score
    except requests.exceptions.RequestException as e:
        print(f"API request error: {e}")
        return "Error in API request."

def extract_score(score_text):
    # Extract the score from the response
    match = re.search(r'Score:\s*(\d+)/100', score_text)
    if match:
        return match.group(1)  # Return the score out of 100
    return "Score not found"

if __name__ == "__main__":
    file_path = "CV_LohWaiChung1.docx"  # Change to your file path
    job_title = "it support"  # Customizable job title

    if file_path.endswith('.txt'):
        resume_text = read_txt(file_path)
    elif file_path.endswith('.pdf'):
        resume_text = read_pdf(file_path)
    elif file_path.endswith('.docx'):
        resume_text = read_docx(file_path)
    else:
        print("Unsupported file format.")
        exit()

    resume_score = extract_resume_info(resume_text, job_title)

    # Improved output display
    if resume_score != "Score not found":
        print(f"履歷表對該職位的分數: {resume_score}/100")
    else:
        print("履歷表對該職位的分數: Score not found")

api_key = os.getenv("OPENAI_API_KEY", "sk-x26ajxMbqpxrDuZIZXNl43KVORF953ikzMSMMqwGQgdnoWFo")

